plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.chaquo.python'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.spf.app"
        minSdk 26
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            // TODO select appropriate ABI filter when creating an APK (arm64-v8a)
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        python {
            pip {
                install "WazeRouteCalculator==0.15"
            }
            pyc {
                // TODO set it to true when creating an APK
                // https://chaquo.com/chaquopy/doc/10.0/android.html#data-files
                src false
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"

    // UI
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$rootProject.coordinatorlayout"

    // Testing
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"

    // Don't use this yet. Will need to migrate from Mobile Vision api to mlkit
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:18.0.0'

    // Use Google's Mobile Vision API to detect text in an image
    implementation 'com.google.android.gms:play-services-vision:19.0.0'
    // To crop an image
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'

    // Room components
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // Lifecycle components
    // For ViewModel
    implementation("androidx.activity:activity-ktx:$rootProject.activityVersion")
    // For ViewModelScope
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycleVersion"
    // For LifecycleScope (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleVersion"

    // Kotlin components
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutines"

    // Item swipe decorator
    implementation "com.github.xabaras:RecyclerViewSwipeDecorator:$rootProject.rvSwipeDecorator"

    // Location
//    implementation "com.google.android.gms:play-services-location:$rootProject.locationVersion"
}